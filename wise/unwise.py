import os
import numpy as np
import pyfits
import fitsio

from astrometry.util.util import Tan
from astrometry.util.fits import *
from tractor import *

def get_unwise_tile_dir(basedir, coadd_id):
    return os.path.join(basedir, coadd_id[:3], coadd_id)

def get_unwise_tractor_image(basedir, tile, band, bandname=None, masked=True,
                             **kwargs):
    '''
    masked: read "-m" images, or "-u"?

    bandname: PhotoCal band name to use: default: "w%i" % band
    '''

    if bandname is None:
        bandname = 'w%i' % band

    mu = 'm' if masked else 'u'

    thisdir = get_unwise_tile_dir(basedir, tile)
    base = os.path.join(thisdir, 'unwise-%s-w%i-' % (tile, band))

    imfn = base + 'img-%s.fits'       % mu
    ivfn = base + 'invvar-%s.fits.gz' % mu
    #ppfn = base + 'std-%s.fits.gz'    % mu
    nifn = base + 'n-%s.fits.gz'      % mu

    print 'Reading', imfn
    wcs = Tan(imfn)
    twcs = ConstantFitsWcs(wcs)

    img = fitsio.FITS(imfn)[0]
    H,W = img.get_info()['dims']
    H,W = int(H), int(W)

    roi,nil = interpret_roi(twcs, (H,W), **kwargs)
    if roi is None:
        # No overlap with ROI
        return None

    (x0,x1,y0,y1) = roi
    twcs.setX0Y0(x0,y0)
    roislice = (slice(y0,y1), slice(x0,x1))

    img = img[roislice]
    print 'Reading', ivfn
    invvar = fitsio.FITS(ivfn)[0][roislice]
    #print 'Reading', ppfn
    #pp = fitsio.FITS(ppfn)[0][roislice]
    print 'Reading', nifn
    nims = fitsio.FITS(nifn)[0][roislice]
    #print 'Median # ims:', np.median(nims)
    good = (nims > 0)
    invvar[np.logical_not(good)] = 0.
    sig1 = 1./np.sqrt(np.median(invvar[good]))

    # Load the average PSF model (generated by wise_psf.py)
    psffn = os.path.join(os.path.dirname(__file__), 'wise-psf-avg.fits')
    print 'Reading', psffn
    P = fits_table(psffn, hdu=band)
    psf = GaussianMixturePSF(P.amp, P.mean, P.var)

    sky = 0.
    tsky = ConstantSky(sky)

    # if opt.errfrac > 0:
    #     nz = (iv > 0)
    #     iv2 = np.zeros_like(invvar)
    #     iv2[nz] = 1./(1./invvar[nz] + (img[nz] * opt.errfrac)**2)
    #     print 'Increasing error estimate by', opt.errfrac, 'of image flux'
    #     invvar = iv2

    tim = Image(data=img, invvar=invvar, psf=psf, wcs=twcs,
                sky=tsky, photocal=LinearPhotoCal(1., band=bandname),
                name='unWISE %s W%i' % (tile, band), domask=False)
    tim.sig1 = sig1
    tim.roi = roi
    tim.nims = nims
    return tim

